<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨写</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-19T06:13:04.188Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Murphy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paper|sentence_ordering_and_coherence_modeling</title>
    <link href="http://yoursite.com/2018/05/19/sentence-ordering-and-coherence-modeling/"/>
    <id>http://yoursite.com/2018/05/19/sentence-ordering-and-coherence-modeling/</id>
    <published>2018-05-19T04:15:02.000Z</published>
    <updated>2018-05-19T06:13:04.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>如何理解文本的连贯性和句子间的内在结构联系，对于<strong>多文本摘要</strong>、<strong>QA</strong>等NLP问题来说十分重要。这篇文章基于set-to-sequence框架，提出了一种RNN-base的端到端的深度学习方法，来解决句子的排序和连贯性问题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>给一个文档和它打乱的句子集合， 模型对句子进行排序。</li><li>给一个文档和他打乱的句子集合， 模型选取句子作为文档的摘要。这篇文章选取的是科学文章，它的摘要比较规范。</li></ol><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>模型模仿了人类解决这个问题的思维，即先读取句子理解它们的意思，排序时再一个一个选择句子。主要分为<em>read</em>， <em>process</em> 和<em>write</em>三个部分。</p><p>我们首先来看下模型的框架, 主要由一个 sentence encoder RNN， set encoder RNN和decoder RNN组成。<br><img src="/images/sentence_ordering_framework.png" alt="model framework"></p><p><strong><code>read</code></strong><br>sentence encoder RNN没什么好讲的，就是一个LSTM网络把各个句子给向量化，得到${s_1, s_2, …, s_n}$， 它们被用作为<em>sentence memeory</em></p><p><strong><code>process</code></strong><br>就是图中的set encoder部分。LSTM网络每一步的输入是前一步的hidden state与memory进行<strong>attention</strong>得到。set encoder会执行m步，称为<em>read cycles</em>, 注意到这个encoder的结果与${s_1, s_2, …, s_n}$的顺序是不相干的。<br><img src="/images/sentence_ordering_encoder.png" alt="set encoder"></p><p><strong><code>write</code></strong><br>decoder是一个<em>pointer network</em>, 在训练时，正确顺序的句子$(s_{o_1}, s_{o_2},…,s_{o_n}) = (x^1, x^2,…,x^n)$ 作为LSTM的输入。预测时前一步的输出$\hat x^{t-1}$作为当前的输入。这里$e^{t,i}_{dec}$ 代表的是在位置$t$，$s_i$作为正确句子的概率。$f$是score函数，可以选择一层feed-forward网络等。<br><img src="/images/sentence_ordering_decoder.png" alt="decoder"></p><p><strong><code>contrastive sentences</code></strong><br>为了增加鲁棒性，加入一些随机句子。</p><p><strong><code>coherence modeling</code> and <code>training objective</code></strong><br>对于一个结果$(s_{p1}, s_{p2},…,s_{pk}$, coherence score的定义如下:<br><img src="/images/sentence_ordering_coherence.png" alt="coherence score"></p><p>故最大似然的目标函数是<br><img src="/images/sentence_ordering_objective.png" alt="objective"></p><h2 id="实验和扩展"><a href="#实验和扩展" class="headerlink" title="实验和扩展"></a>实验和扩展</h2><p><em>order descrimination</em><br>即给定一个paragraph和它打乱重组的版本集合，选出最相近的，这个问题挑战性并不大。</p><p><em>sentence ordering</em><br>给定一堆句子，给它们排序组合成一个段落。主要选取的是科技论文的摘要，因为它们的逻辑结构比较清晰。</p><p><em>sentence ordering and summarization</em><br>可以把模型应用于文档摘要，输入文章的句子，然后按照顺序挑选出句子直到预测出结束符。由于这里不要求输入句子的顺序，故也适用于多文档摘要。可以用事先在ordering task上训练好模型，然后将其用于改善摘要模型。而ordering task可以用大量的<em>未标注语料</em>实现，这点是相当有价值的。</p><p><em>learned sentence representations</em><br>训练好的sentence encoder 可以用来做句子的向量表达，提升其它任务的表现。</p>]]></content>
    
    <summary type="html">
    
      基于set-to-sequence框架，提出了一种RNN-base的端到端的深度学习方法，来解决句子的排序和连贯性问题。
    
    </summary>
    
      <category term="nlp" scheme="http://yoursite.com/categories/nlp/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="Deep Learning" scheme="http://yoursite.com/tags/Deep-Learning/"/>
    
      <category term="Summarization" scheme="http://yoursite.com/tags/Summarization/"/>
    
  </entry>
  
  <entry>
    <title>selenium-如何实现重复使用已经打开的浏览器</title>
    <link href="http://yoursite.com/2018/04/01/reusing-existing-browser-session-selenium/"/>
    <id>http://yoursite.com/2018/04/01/reusing-existing-browser-session-selenium/</id>
    <published>2018-04-01T14:16:53.000Z</published>
    <updated>2018-04-01T14:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用selenium， 有些场景需要在已登陆后再进行操作。而有时候登陆比较麻烦，又要识别图片验证码还要短信验证码。这种时候，再每次运行程序时都开一个新的浏览器，然后进行一遍登陆操作显然是十分傻逼的。<br>那怎么实现登陆一次，然后可以重复利用同一个浏览器呢？<br>我们可以参考这篇文章<a href="http://tarunlalwani.com/post/reusing-existing-browser-session-selenium/" target="_blank" rel="noopener">Re-using existing browser session in selenium</a></p><p>废话不多说，我直接把code贴上来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">executor_url = driver.command_executor._url</span><br><span class="line">session_id = driver.session_id</span><br><span class="line">driver.get(<span class="string">"http://tarunlalwani.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> session_id</span><br><span class="line"><span class="keyword">print</span> executor_url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_driver_session</span><span class="params">(session_id, executor_url)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.remote.webdriver <span class="keyword">import</span> WebDriver <span class="keyword">as</span> RemoteWebDriver</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save the original function, so we can revert our patch</span></span><br><span class="line">    org_command_execute = RemoteWebDriver.execute</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_command_execute</span><span class="params">(self, command, params=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">"newSession"</span>:</span><br><span class="line">            <span class="comment"># Mock the response</span></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">'success'</span>: <span class="number">0</span>, <span class="string">'value'</span>: <span class="keyword">None</span>, <span class="string">'sessionId'</span>: session_id&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> org_command_execute(self, command, params)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Patch the function before creating the driver object</span></span><br><span class="line">    RemoteWebDriver.execute = new_command_execute</span><br><span class="line"></span><br><span class="line">    new_driver = webdriver.Remote(command_executor=executor_url, desired_capabilities=&#123;&#125;)</span><br><span class="line">    new_driver.session_id = session_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Replace the patched function with original function</span></span><br><span class="line">    RemoteWebDriver.execute = org_command_execute</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_driver</span><br><span class="line"></span><br><span class="line">driver2 = create_driver_session(session_id, executor_url)</span><br><span class="line"><span class="keyword">print</span> driver2.current_url</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用selenium时，如何用已经打开的浏览器
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="selenium" scheme="http://yoursite.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>photograph-canon</title>
    <link href="http://yoursite.com/2018/03/27/photograph-canon/"/>
    <id>http://yoursite.com/2018/03/27/photograph-canon/</id>
    <published>2018-03-27T15:02:19.000Z</published>
    <updated>2018-03-29T14:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些基本常识"><a href="#一些基本常识" class="headerlink" title="一些基本常识"></a>一些基本常识</h2><h3 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h3><ol><li>FX, X越大，光圈越小</li><li>作用<ul><li>光圈越大越亮</li><li>光圈越大背景虚化越明显</li></ul></li></ol><h3 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h3><ol><li>控制进光时间</li><li>作用<ul><li>越长越亮</li><li>高速定格，慢速记录过程</li></ul></li></ol><h3 id="ISO"><a href="#ISO" class="headerlink" title="ISO"></a>ISO</h3><ol><li>越高越亮</li><li>太亮会有噪点</li></ol><h3 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h3><ol><li>拍逆光人像时：增加补偿</li><li>拍白色物体时增加补偿，拍黑色时降低</li></ol><h3 id="测光"><a href="#测光" class="headerlink" title="测光"></a>测光</h3><p>拍逆光人像时，点测光比较好</p>]]></content>
    
    <summary type="html">
    
      学习摄影的笔记
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="摄影" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>linux_tips</title>
    <link href="http://yoursite.com/2017/11/22/linux-tips/"/>
    <id>http://yoursite.com/2017/11/22/linux-tips/</id>
    <published>2017-11-22T13:44:21.000Z</published>
    <updated>2018-03-29T14:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zssh解决跳板机传输文件"><a href="#zssh解决跳板机传输文件" class="headerlink" title="zssh解决跳板机传输文件"></a>zssh解决跳板机传输文件</h3><p>很多时候我们需要先通过跳板机去登陆服务器，这样传输文件就很麻烦。还好我们有<del>汰渍</del><code>zssh</code><br>在本机和服务器都安装好zssh后，就可以上传和下载文件了。具体做法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ssh yourgateway</span><br><span class="line">ssh your_remote_server</span><br><span class="line"><span class="meta">#</span>upload</span><br><span class="line">rz -bye</span><br><span class="line">ctrl + @        #press ctrl + space, swithing to your local dir</span><br><span class="line"><span class="meta">zssh&gt;</span> sz file_you_want_to_upload</span><br><span class="line"><span class="meta">#</span>download</span><br><span class="line">sz file_you_want_to_download</span><br><span class="line">ctrl + @</span><br><span class="line"><span class="meta">zssh&gt;</span> rz -bye</span><br></pre></td></tr></table></figure><h3 id="Goole-Driver-CLI-Client"><a href="#Goole-Driver-CLI-Client" class="headerlink" title="Goole-Driver-CLI-Client"></a>Goole-Driver-CLI-Client</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nilarimogard/webupd8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install grive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一些linux笔记
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ESL_chap2_notes</title>
    <link href="http://yoursite.com/2017/09/10/ESL-chap2-notes/"/>
    <id>http://yoursite.com/2017/09/10/ESL-chap2-notes/</id>
    <published>2017-09-10T14:52:53.000Z</published>
    <updated>2018-03-29T14:25:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-2-Variable-Types-and-Terminology"><a href="#2-2-Variable-Types-and-Terminology" class="headerlink" title="2.2 Variable Types and Terminology"></a>2.2 Variable Types and Terminology</h3><ol><li><p>outputs:</p><pre><code>*   **quantitative**: 数值上的接近表示自然意义的接近 -&amp;gt; regression</code></pre><ul><li><strong>qualitative</strong>: cases的有限集合; categorical or discrete -&gt; classification</li><li>ordered categorical: 如small,medium和large<br><em>qualitative</em>的表示:<pre><code>*   {0,1} for two categories</code></pre><ul><li>sometimes <em>dummy variables</em> for K-level qualitative variables, like [1, 0,…,0], [0,1,…,0]</li></ul></li></ul></li></ol><h3 id="2-3-The-Linear-Model-fit-by-Least-Squares-and-Nearest-Neighbors"><a href="#2-3-The-Linear-Model-fit-by-Least-Squares-and-Nearest-Neighbors" class="headerlink" title="2.3 The Linear Model fit by Least Squares and Nearest Neighbors"></a>2.3 The <strong>Linear Model</strong> fit by <em>Least Squares</em> and <strong>Nearest Neighbors</strong></h3><ul><li><em>Linear Model</em>: low variance and potentially high bias;合适scenarios 1</li><li><em>Nearest Neighbors</em>: high variance and low bias;合适scenarios 2<br>The <em>effective number</em> of KNN is N/k and is generally bigger than p (p parameters for least-square)</li></ul><p>Two possible <em>scenarios</em> of training data:</p><ol><li>每个class的数据都是从bivariate Gaussian分布产生，分布之间不相关且means不同; linear decision boundary is the best we can do;</li><li>每一个class的数据都是10个混合的低方差Gaussian分布，且这10个的mean都来自同一Gaussian分布</li></ol>]]></content>
    
    <summary type="html">
    
      读Elements of Statistical Learning的笔记
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
    
      <category term="ESL" scheme="http://yoursite.com/tags/ESL/"/>
    
      <category term="ML" scheme="http://yoursite.com/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>scala notes</title>
    <link href="http://yoursite.com/2017/08/28/scala-notes/"/>
    <id>http://yoursite.com/2017/08/28/scala-notes/</id>
    <published>2017-08-28T10:11:57.000Z</published>
    <updated>2018-03-29T14:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="val-and-var"><a href="#val-and-var" class="headerlink" title="val and var"></a>val and var</h2><p>val: you could not reassign the variant, but whether the variant is mutable or not depends on its own type.<br>the parameters are vals( functional programming)</p><h2 id="Classes-and-Objects"><a href="#Classes-and-Objects" class="headerlink" title="Classes and Objects"></a>Classes and Objects</h2><h2 id="singleton-objects"><a href="#singleton-objects" class="headerlink" title="singleton objects"></a>singleton objects</h2><ol><li>a class and its companion object can access each other’s private members.</li><li>singleton objects inheriting from classes and traits in Chp 13</li><li>you should inherit from <code>Application</code> only when your program is relatively simple and single-threaded.</li></ol><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><h2 id="operatros-are-methods"><a href="#operatros-are-methods" class="headerlink" title="operatros are methods"></a>operatros are methods</h2><ol><li>infix: <code>a + b</code> : <code>(a).+(b)</code></li><li>prefix: <code>+</code>, <code>-</code>, <code>!</code> and <code>~</code>.(short hand of <code>unary_+</code>…)</li><li>postfix: methods that take no arguments</li><li>operator associativity: <code>:</code> right ro left.<br><em>no matter what associativity an operator has, its operands are always evaluated left to right</em></li></ol><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ol><li>the Scala compiler will place the code for the initializers of the fields into the primary constructor in the order in which they appear in the source code.</li><li>abstact classes<br>a class with abstract memeber must iself be declared abstract.</li><li>using <em>parameterless methods</em>(when no parameter), it supports the <em>uniform access principle</em>, which says that client code should not be affected by a decision to implement an attribute as a field or method.<br>encouraged: define methods that take no parameters and have no side effects as parameterless methods.</li></ol><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><ol><li><em>subtyping</em> means that a value of the subclass can be used wherever a value of the superclass is required.</li><li><p>scala has two namespaces:</p><pre><code>1.  values(fields, methods, package, and singleton objects)</code></pre><ol start="2"><li><p>types(class and trait names)</p><p>so you could overriding a parameterless method with a field.</p></li></ol></li><li><p>factory object<br>a factory object contains methods that construct other objects. Clients would then use these factory methods for object construction rather than constructing the objects directly with <code>new</code></p></li><li><code>Null</code> is a subclass of every reference class. <code>Nothing</code> is a subtype of every other type.</li><li>value equality: <code>==</code>, reference equality: <code>eq</code>.</li><li><p>How to write an <em>equality method</em> ?</p><pre><code>1.  override `equals` in class `Any`: `override def equals(other: Any) = ...`</code></pre><ol start="2"><li>override <code>hashCode</code> method</li><li>when <code>equals</code> and <code>hashCode</code> are defined in terms of mutable fields, you may need more things to do.</li><li><p>to deal with the equality relationships between class and its subclass, you need to add one more method <code>def canEqual(other: Any): Boolean</code> for non-final class. For the example bellow, if the subclass <code>ColoredPoint</code> overrides <code>canEqual</code>, then the instance of <code>ColoredPoint</code> and <code>Point</code> is not equal, otherwise, it can be equal to a <code>Point</code> instance.</p><pre><code>//one example</code></pre><p>class Point(val x: Int, val y: Int) {<br>override def hashCode = 41*(41 + x) + y<br>override def equals(other: Any) = other match {</p><pre><code>case that: Point =&amp;gt;                (that canEqual this) &amp;amp;&amp;amp;    (this.x == that.x) &amp;amp;&amp;amp; (this.y == that.y)case _ =&amp;gt; false</code></pre><p>}<br>def canEqual(other: Any) = other.isInstanceOf[Point]<br>}<br>`</p></li></ol></li></ol><h2 id="Build-in-control-structures"><a href="#Build-in-control-structures" class="headerlink" title="Build-in control structures"></a>Build-in control structures</h2><ol><li>Try to challenge <code>while</code> loops in your code in the same way you challenges <code>var</code>s. <em>If there isn’t a good justification for a particular <code>while</code> or <code>do-while</code> loop, try to find a way to do the same thing without it.</em></li><li>For expression<br>using <code>for</code> expression may make things clearer<br><pre>`persons withFilter (p =&gt; !p.isMale) flatMap (p =&gt;<pre><code>(p.children map (c =&amp;gt; (p.name, c.name) ) )</code></pre>//clear<br>for (p &lt;- persons; if !p.isMale; c &lt;- p.children)<pre><code>yield (p.name, c.name)</code></pre><code>&lt;/pre&gt;in fact, every</code>for<code>expression can be expressed in terms of the three higher-order functions</code>map<code>,</code>flatMap<code>and</code>withFilter<code>. So if you define</code>map<code>,</code>flatMap<code>,</code>withFilter<code>and</code>foreach<code>methods for your data type, your data types could support</code>for<code>expression. If you just define a subset of these methods, then your data type would support a subset of all possible</code>for` expressions.</pre></li><li><p>live without <code>break</code> and <code>continue</code>, <em>tail-call</em>.</p><pre><code>1.  If the solution is tail recursive, there won’t be any runtime overhead to be paid.（_tail-call optimization_)</code></pre><ol start="2"><li><em>tail-call optimization</em> is limited to situations in which a method or nested function calls itself directly as its last operation.</li></ol></li></ol><h2 id="Function-and-Closures"><a href="#Function-and-Closures" class="headerlink" title="Function and Closures"></a>Function and Closures</h2><ol><li>programs should be decomposed into many small functions that each do a well-defined task.</li><li>first-class functions<br> Every function value is an instance of some class that extends one of several <code>FuntionN</code> traits in packages <code>scala</code>. Each     <code>FunctionN</code> trait has an <code>apply</code> method used to invoke the function.</li><li>partially applied functions<br><pre><code>someNumbers.forach(sum _)</code></pre><br> you could leave off the <code>-</code> here (only when a function type is expected).</li><li>closures<br>when a closure accesses some variable that has several different copies as the program runs, the instance used is the one that was active at the time the closure was created.</li></ol><h2 id="Control-Abstraction"><a href="#Control-Abstraction" class="headerlink" title="Control Abstraction"></a>Control Abstraction</h2><h2 id="Curring"><a href="#Curring" class="headerlink" title="Curring"></a>Curring</h2><h2 id="By-name-parameters"><a href="#By-name-parameters" class="headerlink" title="By-name parameters"></a>By-name parameters</h2><pre><code>&lt;pre&gt;`def byNameAssert(predicate: =&amp;gt; Boolean) =     if (assertionsEnabled &amp;amp;&amp;amp; !predicate)        throw new AssertionErrordef boolAssert(predicate: Boolean) =     if(assertionEnabled &amp;amp;&amp;amp; !predicate)        throw new AsserstionError//evaluate (5&amp;gt;3) before the call to boolAssertboolAssert(5 &amp;gt; 3)//the expression (5&amp;gt;3) is not evaluated before the call to byNameAssert.byNameAssert(5 &amp;gt; 3)`&lt;/pre&gt;</code></pre><h2 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h2><ol><li><p>A trait differs with a class:</p><pre><code>1.  no parameters</code></pre><ol start="2"><li><code>super</code> calls are dynamically bound</li></ol></li><li>if a trait delcares a superclass, then it can only be mixed into a class that also extends that superclass.<br><pre>`trait Doubling extends IntQueue {<pre><code>abstract override def put(x: Int) { super.put(2*x) }</code></pre>}<br><code>&lt;/pre&gt;</code>super<code>call is dynamically bound, it will work so long as the trait is mixed in _after_ another trait or class that gives a concrete definition to the method.</code>abstract override` (only used for traits) means that the trait must be mixed into some class that has a concrete definition ot the method.</pre></li><li>traits as stackable modifications    <pre><code>val queue = (new BasicIntQueue                    with Filtering with Incrementing)</code></pre><br> traits further to the right take effect first. when determine the     <code>super</code> call, use <em>linearization</em>!4.  If it might be reused in multiple, unrelated classes, use trait;<br>if you want to inherit from it in Java code, use abstract class;<br>if you plan to distribute it in compiled form, lean towards an abstract class;<br>if efficiency is very important, lean towards using a class.</li></ol><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><ol><li><p>flexible:</p><pre><code>*   may appear anywhere</code></pre><ul><li>may refer to objects(singleton or regular) in addition to packages</li><li>let you rename and hide some of the imported members<pre>`import Fruits.{Apple =&gt; McIntosh}   //rename apple//import all Fruits except for Appleimport Fruits.{Apple =&gt; _, _}`</pre></li></ul></li><li>scope of protection<br><code>private[X]</code> or <code>protected[X]</code> means that access is private or protected “up to” X, where X disignates some enclosing package, class or singleton object.</li><li>package objects<br>Each package is allowed to have one package object.</li></ol><h2 id="Assertions-and-Unit-Testing"><a href="#Assertions-and-Unit-Testing" class="headerlink" title="Assertions and Unit Testing"></a>Assertions and Unit Testing</h2><pre><code>to be read</code></pre><h2 id="Case-Classese-amp-amp-Pattern-Matching-amp-amp-Extractors"><a href="#Case-Classese-amp-amp-Pattern-Matching-amp-amp-Extractors" class="headerlink" title="Case Classese &amp;&amp; Pattern Matching &amp;&amp; Extractors"></a>Case Classese &amp;&amp; Pattern Matching &amp;&amp; Extractors</h2><ol><li><p>case classes</p><pre><code>1.  _case class_ addes a factory method with the name of class.2.  all arguments in the parameter list of a case class implicitly get a     `val` prefix, so they are maintained as fields.</code></pre><ol start="3"><li>the compiler addes methods <code>toString</code>, <code>hashCode</code>, <code>equals</code> to case     class.</li><li>the compiler adds a <code>copy</code> method for making modified copies.</li></ol></li><li>a variable pattern matches any object, Scala binds the variable to whatever the object is.<br>To treat a lowercase identifier as a constant in a pattern match, use back-tick <code></code>pi<code></code>.</li><li>typed patterns<pre>`def generalSize(x: Any) = x match {    case s: String =&gt; s.length    case m: Map[_, _] =&gt; m.size    case _ =&gt; -1}`</pre>because of _type erasure_, you could not chek `case m: Map[Int, Int]`. Only exception to the erasure rule is arrays. `case a: Array[String]` . The element type of an array is stored with the array value, so you can pattern match on it.variable binding:<pre>`expr match {    case Unop(&quot;abs&quot;, e @ Unop(&quot;abs&quot;, _) ) =&gt; e    case _ =&gt;    }`</pre></li><li>A <em>sealed class</em> cannot have any new subclasses added except the ones in the same file. If we want Scala compiler help to detect missing patterns, we should make the superclass of case classes sealed.</li><li><p>case sequences as partial functions6.  patterns in <code>for</code> expressions<br> <code>for (Some(fruit) &amp;lt;- results) println(fruit)</code><br>Extractors</p><hr></li><li><p>A extractor is an object that has a method called <code>unapply</code> or <code>unapplySeq</code>.</p><pre>`object Domain {    def apply(parts: String*): String =            parts.reverse.mkString(&quot;.&quot;)    def unapplySeq(whole: String): Option[Seq[String]] =            Some(whole.split(&quot;\\.&quot;).reverse)}dom match {    case Domain(&quot;org&quot;, &quot;acm&quot;) =&gt; println(&quot;acm.org&quot;)    case Domain(&quot;net&quot;, _*) =&gt; println(&quot;a .net domain&quot;)`</pre></li><li>Compared with case classes, extractors is <em>representation independence</em>, that’s to say, patterns have nothing to do with the data type of the object that’s selected on. While case classes also have their advantages: short code and more efficient.</li></ol><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h2 id="List-amp-Sets-and-Maps"><a href="#List-amp-Sets-and-Maps" class="headerlink" title="List &amp; Sets and Maps"></a>List &amp; Sets and Maps</h2><ol><li>type inference algorithm:<br>Type inference is flow based. In a method application <code>m(args)</code>, it first checks whether the method <code>m</code> has a known type. If it has, that type is used to infer the expected type of the arguments.<br><pre><code>msort((x: Char, y: Char) =&amp;gt; x &amp;gt; y)(abcdb)abcde sortWith (_ &amp;gt; _)</code></pre><br>the type of <code>abcde</code> is <code>List[Char]</code>, so we do not need to write it explicitly, could just use <code>_</code>.</li><li>When designing a polymorphic method that takes some non-function arguments and a funtion argument, place the function argument last in a curried parameter list.( The methods’ correct instance type can be inferred from the non-function arguments).</li><li><code>scala.collection.mutable.Set()</code> and <code>scala.collection.mutable.Map()</code> usually uses hash talbe. While for <code>scala.collection.immutable.{Set(), Map()}</code>, it depends how many elements you pass to it. If there are more than 5 elements, then they use hash methods.</li></ol><h2 id="collection-hierarchy"><a href="#collection-hierarchy" class="headerlink" title="collection hierarchy"></a>collection hierarchy</h2><ol><li>the difference between <code>Traversable</code> and <code>Iterable</code> ?<br>see discussion in <a href="http://stackoverflow.com/questions/7425370/scala-what-is-the-difference-between-traversable-and-iterable-traits-in-scala-c" target="_blank" rel="noopener">stackOverflow</a></li><li>All collections except streams and views are strict. The only way to go from a strict to a lazy collection is via the <code>view</code> method. The only way to go back is via <code>force</code>.</li><li><p>a <em>view</em> is a special kind of collection that represents some base collection, but implements all of its transformers lazily.</p><pre><code>1.  Using view could avoiding intermediate results.</code></pre><ol start="2"><li>create a subwindow for mutable sequences to update selectively some elements of that sequence.<pre>`findRalindrome(words.view take 10000) //1//2val arr = (0 to 9).toArrayval subarr = arr.view.slice(3, 6)do_something(subarr) // update partial of arr`</pre></li></ol></li><li>Factoring out common operations<br><code>CanBuildFrom</code>: check this <a href="http://blog.bruchez.name/2012/08/getting-to-know-canbuildfrom-without-phd.html" target="_blank" rel="noopener">post</a></li><li>integrate a new collection class into the framework<pre><code>1.  decide whether the collection should be mutable or immutable</code></pre><ol start="2"><li>pick the right base traits for the collection</li><li>inherit from the right implementation trait to implement most collection operations</li><li>if you want <code>map</code> and similar operations to return instances of your collection type, provide an implicit <code>CanBuildFrom</code> in your class’s companion object.</li></ol></li></ol><h2 id="Type-Parameterization"><a href="#Type-Parameterization" class="headerlink" title="Type Parameterization"></a>Type Parameterization</h2><h2 id="variance-annotations"><a href="#variance-annotations" class="headerlink" title="variance annotations"></a>variance annotations</h2><ol><li><em>covariant</em>(<code>+</code>), <em>contravariant</em>(<code>-</code>), <em>nonvariant</em></li><li>In a purely functional word, many types are natureally covariant. However, the situation changes once you introduce mutable data. In fact, if a generic parameter type appears as the type of a method parameter, the containing class or trait may not be covariant in that type parameter.</li><li>In scala, arrays are <em>nonvariant</em>.  you could cast an array of <code>T</code>s to an array of any supertype of <code>T</code><pre>`val a1 = Array(&quot;abc&quot;)val a2: Array[Object] =        a1.asInstanceOf[Array[Object]]`</pre></li><li><em>lower bound</em><br><pre>`class Queue[T](private val leading: List[T],<pre><code>private val trailing: List[T] ) {def enqueue[U &amp;gt;: T](x: U) =            new Queue[U](leading, x :: trailing)//...</code></pre>}<br><code>&lt;/pre&gt; You coud append an</code>Orange<code>to a</code>Queue[Apple]<code>. The result will be a</code>Queue[Fruit]`.s</pre></li><li><em>Liskov Substitution Principle</em>: It is safe to assume that a type <code>T</code> is a subtype of a type <code>U</code> if you can substitute a value of type <code>T</code> whereer a value of type <code>U</code> is required.  The principle holds if <code>T</code> supports the same operations as <code>U</code> and ll of <code>T</code>‘s operations require less and provides more than the corresponding operations in <code>U</code>.<br>When you write the function type <code>A =&amp;gt; B</code>, Scala expands this to <code>Function1[A,B]</code>.<br><pre>`trait Function[-S, +T] {<pre><code>def apply(x: S): T</code></pre>}<br><code>&lt;/pre&gt;The</code>Function1<code>in the trait is contravariant in the function argument type</code>S<code>and covariant in the result type</code>T`, because argument are somthing that’s required, whereas results are something that’s provided.</pre></li><li><em>upper bound</em>    <pre><code>def orderedMergeSort[T &amp;lt;: Ordered[T]](xs: List[T]): List[T] = {...}</code></pre><br> Means the element type of the list passed to <code>orderedMergeSort</code> must be a subtype of <code>Ordered</code>.</li><li>object private data<br><pre>`class Queue[+T] private(<pre><code>private[this] var leading: List[T],private[this] var trailing: List[T]</code></pre>){ … }<br><code>&lt;/pre&gt; Here type</code>T<code>is a covariant type, but</code>leading<code>and</code>trailing<code>are  variable, there should be a contravariant position, there will be a compiler error. But if we mark</code>private[this]`, the compiler has special handling in it’s variance checking for this case.</pre></li></ol><h2 id="Abstract-Members"><a href="#Abstract-Members" class="headerlink" title="Abstract Members"></a>Abstract Members</h2><ol><li>one example<pre>`trait Abstract {    type T  //abstract type    def transform(x: T): T    val initial: T    var current: T}`</pre></li><li>For abstract vals, it could only be implemented by a <code>val</code> definition; For abstract method, it may be implemented by both concrete method definitions and concrete <code>val</code> definitions.</li><li><p>initializing abstract vals    <pre>`trait RationalTrait {</pre></p><pre><code>val numerArg: Intval denomArg: Int</code></pre><p>}<br>//anonymous class<br>new RationalTrait {</p><pre><code>val numerArg = 1val denomArg = 2require(denomArg != 0)//exception...</code></pre><p>}<br>//pre-initialized<br>new {</p><pre><code>val numerArg = 1 * xval denomArg = 2 * x</code></pre><p>} with RationalTrait<br><code>&lt;/pre&gt;Here we first define a trait</code>RationalTrait<code>with abstract vals, then we have an _anonymous class_ that mixes in the trait. The anonymous class is initialized _after_ the</code>RationalTrait<code>, so the values of</code>numerArg<code>and</code>denomArg<code>are not available during the initialization of</code>RationalTrait<code>(i.e. theses two are 0). so the</code>require<code>invocation will fail.so, a class parameter argument is evaluated _before_ it is passed to the class constructor(unless by-name). An implementing</code>val` definition in a subclass, by contrast, is evaluated only <em>after</em> the superclass has been initialized. Two solutions:</p><pre><code>*   pre-initialized</code></pre><ul><li>lazy vals</li></ul></li><li>path-dependent types<br><pre>`class DogFood extends Food<br>class Dog extends Animal {<pre><code>type SuitableFood =  DogFoodoverride def eat(food: DogFood) {}</code></pre>}<br>val bessy = new Dog<br>val lassie = new Dog<br><code>&lt;/pre&gt;</code>bessy.SuitableFood<code>is a _path-dependent type_ and it’s the same type as</code>lassie.SuitableFood<code>. while&lt;pre&gt;</code>class Outer {<pre><code>class Inner</code></pre>}<br>val o1 = new Outer<br>val o2 = new Outer<br><code>&lt;/pre&gt;</code>o1.Inner<code>is a different type as</code>o2.Inner<code>. They are subtypes of</code>OuterInner`.</pre></li><li>structural subtyping<br>you get a subtyping relationship simply because two types have the same members.<pre><code>*   If you want to define a _Pasture_ class that contains animals that eat grass, you could write the type `Animal { type SuitableFood = Grass }`. so you could define _Pasture_ like this:</code></pre>  class Pasture {<br><pre><code>val animals: List[ Animal {type SuitableFood = Grass} ] = Nil}</code></pre><ul><li>If you want to group together a number of classes that were written by someone else.    <pre><code>def using[T &amp;lt;: { def close(): Unit }, S](obj: T)(operation: T =&amp;gt; S) = {val result = operation(obj)obj.close()result}</code></pre><br>No base type is specified, so Scala would use <code>AnyRef</code> automatically, and the type <code>T</code> must support <code>close()</code> method.</li></ul></li></ol><h2 id="Implicit-Conversions-and-Parameters"><a href="#Implicit-Conversions-and-Parameters" class="headerlink" title="Implicit Conversions and Parameters"></a>Implicit Conversions and Parameters</h2><ol><li><p>rules for implicits:</p><pre><code>1.  Marking Rule: Only definitions marked `implicit` are available.</code></pre><ol start="2"><li>Scope Rule: An inserted implicit conversion must be in scope as a single identifier, or be associated with the source or target type of the conversion(i.e. companion object).</li><li>One-at-a-time Rule: Only one implicit is tried.</li><li>Explicits-First Rule: Whenever code type checks as it is written, no implicits are attempted.</li></ol></li><li><p>Where implicits are tried:</p><pre><code>1.  implicit conversion to an expected type</code></pre><p><pre>`//1<br>implicit def int2double(x: Int): Double = x.toDouble<br>var i: Double = 1<br>//2 receiver<br>implicit def intToRational(x: Int) =        new Rational(x, 1)<br>1 + oneHalf   //intToRational(1) + oneHalf<br>//3    def maxList<a href="elements: List[t]" target="_blank" rel="noopener">T</a></pre></p><pre><code>(implicit orderer: T =&amp;gt; Ordered[T]): T =        elements match{    case List() =&amp;gt;        throw new IllegalArgumentException(&amp;quot;empty list!&amp;quot;)    case List(x) =&amp;gt; x    case x :: rest =&amp;gt;        val maxRest = maxList(rest) //(orderer) is implicit        if (x &amp;gt; maxRest) x //orderer(x) is implicit        else maxRest}</code></pre><p>maxList(List(1,5,10,3))  //res: Int = 10<br>//view bound<br>def maxList2<a href="elements: List[T]" target="_blank" rel="noopener">T &lt;% Ordered[T] </a>: T =            { …. }<br>//upper bound<br>def maxList3[T &lt;: Ordered[T] }(elements: List[T]): T =        { … }</p><pre><code>2.  Converting the receiver: interoperating with new types; simulating new syntax3.  implicit parameters</code></pre><p>view bound: We could use <em>view bound</em> to shorten the method header.<br>The difference between view bound and upper bounds <code>T &amp;lt;: Ordered[T]</code> is that upper bounds require that <code>T</code> is a subtype of <code>Ordered[T]</code>, however, for view bound, it only requires that T can <em>be treated as an <code>Ordered[T]</code></em>. So we could pass a <code>List[Int]</code> to <code>maxList</code> and <code>maxList2</code> but no to <code>maxList3</code>.</p></li><li><p>multiple conversions<br>choose a more <em>sprcific</em> one. One implicit conversion is more spercific than another if one of the following applies:</p><pre><code>1.  The argument type of the former is a subtype of the latters’s</code></pre><ol start="2"><li>Both conversions are methods, and the enclosing class of the former extends the enclosing class of the latter.</li></ol></li></ol><h2 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h2><ol><li>standard annotations:<br><code>@deprecated</code> <code>@volatitle</code> <code>@serializable</code> <code>@SerialVersionUID</code> <code>@transient</code><br><a href="mailto:`@scala.reflect.BeanProperty" target="_blank" rel="noopener">`@scala.reflect.BeanProperty</a><code></code>@tailrec<code></code>@unchecked<code></code>@native`</li></ol><h2 id="Modular-Programming-Using-Object"><a href="#Modular-Programming-Using-Object" class="headerlink" title="Modular Programming Using Object"></a>Modular Programming Using Object</h2><ol><li><em>self type</em><br>check <a href="http://stackoverflow.com/questions/1990948/what-is-the-difference-between-self-types-and-trait-subclasses" target="_blank" rel="noopener">this</a> post in StackOverflow.</li><li><em>singleton type</em><br>A singleton type is extremely specific and holds only one object. check this <a href="http://hongjiang.info/scala-type-system-singleton-type/" target="_blank" rel="noopener">post</a></li></ol><h2 id="Actors-and-Concurrency"><a href="#Actors-and-Concurrency" class="headerlink" title="Actors and Concurrency"></a>Actors and Concurrency</h2><p>not too much to record, the example showed in <em>Programming in Scala</em> is worth understanding.</p>]]></content>
    
    <summary type="html">
    
      学习scala的笔记
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
      <category term="scala" scheme="http://yoursite.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>[读Paper]information-extraction-by-acquiring-external-evidence-with-reinforcement-learning</title>
    <link href="http://yoursite.com/2016/11/22/%E8%AF%BBPaper-information-extraction-by-acquiring-external-evidence-with-reinforcement-learning/"/>
    <id>http://yoursite.com/2016/11/22/读Paper-information-extraction-by-acquiring-external-evidence-with-reinforcement-learning/</id>
    <published>2016-11-22T14:12:57.000Z</published>
    <updated>2018-03-29T15:07:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>利用自然语言处理技术从文档中来提取或者补全实体信息是非常有用的，然而也充满挑战。文档可能并不含有直观的信息，如下图，我们想从一个关于枪杀案的新闻中提取出枪手、受害者人数的信息，其中，受害者人数无法直接提取，需要复杂的方法才能够得出。</p><p><img src="/images/rl_example1.png" alt=""></p><p>于是，论文提出了引用外部数据，并利用强化学习框架来解决这个问题。 对原文档构建query，再利用搜索引擎，我们就可以得到多个相关的文档。同样上述的例子，在下图两个新闻文档中，就可以分别都很简单地提取出受害者人数和枪手的名字这两个信息，系统对这些信息进行整合，就可以提取出所有的信息。</p><p><img src="/images/rl_example2.png" alt=""></p><h3 id="模型框架"><a href="#模型框架" class="headerlink" title="模型框架"></a>模型框架</h3><p><img src="/images/rl_framework.png" alt=""></p><p>整个信息抽取的过程是一个马尔科夫决策过程(<strong>MDP</strong>), 每一步，系统将从新文档中提取出的信息($e_new$)和现有的信息($e_cur$)进行整合(<strong>Reconcile</strong>)，并决定如何选取下一个query来进行搜索并提取更多的文章(<strong>Q</strong>)。</p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>其中，对于每一个状态(<strong>State</strong>)具体情况，包含有：</p><ul><li>$e_cur$的confidence score</li><li>$e_new$的confidence score,*   $e_cur$ 和 $e_new$的匹配情况</li><li>contaxt words的unigram/tf-idf值</li><li>原文档和新文档的tf-idf相似度</li></ul><p><img src="/images/rl_state.png" alt=""></p><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>一个动作(<strong>Action</strong>)包含整合与查询新文档，即$a = (d, q)$。 其中，d包括接受部分实体的信息，接受全部实体的信息，拒绝全部实体的信息，停止四种类型的动作。 转移方程$T(s’|s, a$, 根据现在状态S和动作a即可以获得下一个状态。而由现有状态来选择执行什么动作a则是由Agent决定的，这也是使用强化学习训练的地方。</p><h4 id="Rewards"><a href="#Rewards" class="headerlink" title="Rewards"></a>Rewards</h4><p>对于强化学习，我们还需要定义Rewards函数，用来最大化最后的抽取accuracy并且惩罚过多的query动作。所有实体现有状态的accuracy值和之前状accuracy值之差的和即为reward值。<br><img src="/images/rl_reward.png" alt=""></p><p>下面是框架的伪代码。其中，13行抽取实体是用的基于最大熵的模型，会在第四节进行介绍。<br><img src="/images/rl_code1.png" alt=""></p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>Agent 定义了一个state-action 函数 $Q(s, a)$ 来决定在state s下该执行那个action a。常用Q-learning对最优值进行求解，即迭代地利用得到的rewards对$Q(s, a)$ 进行更新。论文使用了一个深度Q-network($DQN$)对该函数进行学习，下图即为其结构图。</p><p><img src="/images/rl_arch.png" alt=""></p><p>输入为状态向量s, 分别输出整合动作d和查询动作q。参数的学习利用了RMSprop梯度下降法,每次参数迭代旨在减少DQN预测的$Q(s_t,a_t;θ)$ 和有Bellman equation得到的值$r_t+ \gama max_a Q(s_(t+1),a;θ)$的差距。这些都是强化学习里面的概念，不展开讲了。下面是训练Agent的伪代码。</p><p><img src="/images/rl_code2.png" alt=""></p><h3 id="方法对比"><a href="#方法对比" class="headerlink" title="方法对比"></a>方法对比</h3><p>论文将强化学习模型与其他方法进行对比。其中，其他模型有：</p><ul><li>基于CRF和最大熵（Maxent）的分类模型，它们用到的特征如下：</li></ul><p><img src="/images/rl_feature.png" alt=""></p><p>其中，Maxent也在该强化学习模型里用来进行实体抽取。</p><ul><li>对多个文档的抽取信息进行融合的模型，分别有基于打分的Confidence和基于次数的Majority模型</li><li>输入和DQN一样的meta-classifer.</li></ul><p>论文实验的数据集有两个</p><ul><li>Gun Violence archive，是关于枪杀案的新闻存档，需要提取的信息有:1 枪手的名字, 2 遇害者人数, 3 受伤人数, 发生的城市。</li><li>Foodshield EMA, 包含了食物掺假事件的报道，需要提取的信息有: 1 受影响的食物 2 掺杂物，3 事件发生的地址。</li></ul><p>下面是在这两个数据集中增强学习的性能，从 accuracy可以看出它比其他模型都要好。<br><img src="/images/rl_result.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>论文将增强学习运用到信息抽取上，利用了不同文本对同一实体信息抽取难度的不同，协调各个源的偏差，有效的提高了抽取的准确度。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://arxiv.org/pdf/1603.07954.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1603.07954.pdf</a></p>]]></content>
    
    <summary type="html">
    
      将强化学习用于信息抽取
    
    </summary>
    
      <category term="nlp" scheme="http://yoursite.com/categories/nlp/"/>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="Reinforcement learning" scheme="http://yoursite.com/tags/Reinforcement-learning/"/>
    
      <category term="IR" scheme="http://yoursite.com/tags/IR/"/>
    
  </entry>
  
  <entry>
    <title>Libnids抓不到包</title>
    <link href="http://yoursite.com/2016/09/10/Libnids%E6%8A%93%E4%B8%8D%E5%88%B0%E5%8C%85/"/>
    <id>http://yoursite.com/2016/09/10/Libnids抓不到包/</id>
    <published>2016-09-10T13:59:20.000Z</published>
    <updated>2018-03-29T14:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>用libnids提供的example编译通过，竟然捕不到包。很是郁闷<br>找了很多资料，终于发现了这么一个办法。<br><code>nids.h</code> 中有这么一段</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nids_chksum_ctl</span>&#123;</span></span><br><span class="line">u_int netaddr;</span><br><span class="line">u_int mask;</span><br><span class="line">u_int action;</span><br><span class="line">u_int reserved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">nids_register_chksum_ctl</span><span class="params">(struct nids_chksum_ctl *, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>这段是和计算校验和相关，比较新的网卡会自动计算校验和，所以我们只要将关了就行。在main()最开始加上如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test</span></span><br><span class="line">strcut nids_chksum_ctl temp;</span><br><span class="line">temp.netaddr = <span class="number">0</span>;</span><br><span class="line">temp.mask = <span class="number">0</span>;</span><br><span class="line">temp.action = <span class="number">1</span>;</span><br><span class="line">nids_register_chksum_ctl(&amp;temp,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>大功告成，我终于能捕获数据包了，555555</p>]]></content>
    
    <summary type="html">
    
      libnids抓不到包的解决办法
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>effective c++ notes</title>
    <link href="http://yoursite.com/2016/08/25/effective-c-notes/"/>
    <id>http://yoursite.com/2016/08/25/effective-c-notes/</id>
    <published>2016-08-25T15:32:57.000Z</published>
    <updated>2018-03-29T14:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Accustoming-yourself-to-C"><a href="#Accustoming-yourself-to-C" class="headerlink" title="Accustoming yourself to C++"></a>Accustoming yourself to C++</h3><h4 id="2-prefer-consts-enums-and-inlines-to-define"><a href="#2-prefer-consts-enums-and-inlines-to-define" class="headerlink" title="2 prefer consts, enums, and inlines to #define."></a>2 prefer <code>const</code>s, <code>enum</code>s, and <code>inline</code>s to <code>#define</code>.</h4><ol><li>One special case need to be noted is class-specific constants. check this question in <a href="http://stackoverflow.com/questions/185844/initializing-private-static-members" target="_blank" rel="noopener">stackOverflow</a></li><li>difference between declaration and definition. Check this question in <a href="http://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration" target="_blank" rel="noopener">stackOverflow</a></li></ol><h4 id="3-Use-const-whenever-possible"><a href="#3-Use-const-whenever-possible" class="headerlink" title="3 Use const whenever possible"></a>3 Use <code>const</code> whenever possible</h4><ol><li>declaring an iterator const is like declaring a pointer const. <code>const std::vector&amp;lt;int&amp;gt;::iterator iter = ...</code>, here iter acts like a <code>T* const</code>. If you want an iterator that points to something that can’t be modified, you want a <code>const_iterator</code>.</li><li>when const and non-const member functions have essentially identical implementations, code duplication can be avoided by having the non-const version call the const version.</li></ol><h4 id="4-Make-sure-that-objects-are-initialized-before-they’re-used"><a href="#4-Make-sure-that-objects-are-initialized-before-they’re-used" class="headerlink" title="4 Make sure that objects are initialized before they’re used."></a>4 Make sure that objects are initialized before they’re used.</h4><ol><li>For constructor of a class, prefer using initialization list to assignment inside the body of the constructor.</li><li>order in which an object’s data is initialized: base classes are initialized before derived classes, and within a class, data members are initialized in the order in which they are declared.</li><li>avoid initialization order problems across translation units by replacing non-local static objects with local static objects.</li></ol><h3 id="Constructors-destructors-and-assignment-operators"><a href="#Constructors-destructors-and-assignment-operators" class="headerlink" title="Constructors, destructors, and assignment operators"></a>Constructors, destructors, and assignment operators</h3><ol><li>To <strong>disallow</strong> functionality automatically provided by compilers, declare the corresponding member functions <code>private</code> and give no implementations. Using a base class like <code>Uncopyable</code> is one way to do this. [For <strong>c++11</strong>, you could use <code>= delete</code>.]</li><li>declare desturctors virtual in <strong>polymorphic base</strong> classes. If a class has any virtual functions, it should have a <strong>virtual destructor</strong>.</li><li>prevent <strong>exceptions</strong> from leaving <strong>destructors</strong>. If function called in a destructor may throw, the destructor should catch any exceptions, then swallow them or terminate the program.</li><li>don’t call <strong>virtual</strong> functions during construction or destruction.</li><li>have <strong>assignment</strong> operators return a reference to <code>*this</code></li><li>make sure <strong>operator=</strong> is well-behaved when an object is assigned to itself: comparing addresses of source and target objects, careful statement ordering, and copy-and-swap.</li></ol><h3 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h3><ol><li>To prevent resource leaks, use RAII(resource Acquisition Is Initialization) oejects that acquire resources in their constructors and release them in their destructors.( auot_ptr and tr1::shared_ptr)[ For <strong>c++11</strong>, <code>shared_ptr</code> and <code>unique_ptr</code>.]</li><li>when you use [] in <code>new</code>, remember use <code>delete []</code></li><li>store <em>newwd</em> objects in smart pointers in standalone statements. Failure to do this can lead to subtle resource leaks when exceptions are thrown.</li><li>Prefer <strong>pass-by-reference-to-const</strong> over pass-by-value. It’s typically more efficient and it avoids the slicing problem. The rule doesn’t apply to built-in types and STL iterator and function object types.</li><li>don’t try to return a reference when you must return an object.</li><li>declare date members <code>private</code>; <code>protected</code> is no more encapsulated than <code>public</code></li><li>prefer <strong>non-member non-friend functions</strong> to member functions. Doing so increase encapsulation, packaging flexibility, and functional extensibility.</li><li>declare non-member functions when <strong>type conversions</strong> should aply to all parameters. For example, define <code>operator*</code> for class <code>Rational</code>.</li><li><strong>Swap</strong><pre><code>1.  provide a `swap` member function when `std::swap` would be _inefficient_ for your type. Make sure your `swap` doesn’t throw exceptions</code></pre><ol start="2"><li>if you offer a member <code>swap</code>, also offer a non-member <code>swap</code> that calls the member. For classes(not templates), specialize <code>std::swap</code>(<em>total template specialization</em>).</li><li>when calling <code>swap</code>, employ a <code>using</code> delcaration for <code>std::swap</code>, then call <code>swap</code> without namespace qualification.</li><li>If’s fine to totally specialize <code>std</code> templates for user-defined types, but never try to add something completely new to <code>std</code>.</li></ol></li></ol><h3 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h3><ol><li>postphone variable definitions as long as possible.</li><li>avoid <strong>casts</strong> whenever practical, especially <code>dynamic_cast</code>s in performance-sensitive code. If a design requires casting, try to develop a cast-free alternative.</li><li>avoid <strong>returning handles</strong> (references, pointers, or iterators) to object internals. It increase encapsulation, helps <code>const</code> member functions act <code>const</code>, and minimizes the creation of dangling handles.</li><li>strive for <strong>exception-safe code</strong><br>Exception-safe functions leak no resources and allow no data structures to become corrupted, even when exceptions are thrown. Such functions offer the basic, strong, or nothrow guarantees.</li><li>Limit most <strong>inlining</strong> to small, frequently called functions. This facilitates debugging and binary upgradability, minimizes potential code bloat, and maximizes the chances of greater program speed.</li><li>The general idea behind <strong>minimizing compilation dependencies</strong> is to depend on declarations instead of definitions. Two approaches based on this idea are <em>Handle classes</em> and <em>Interface classes</em>.<pre><code>*   **forward declaration**, check the answers [1](http://stackoverflow.com/questions/553682/when-can-i-use-a-forward-declaration) [2](http://stackoverflow.com/questions/4757565/c-forward-declaration) in stackOverlfow.</code></pre><ul><li><strong>pimpl idiom</strong>(pointer to implementation), check the answers <a href="http://stackoverflow.com/questions/8972588/is-the-pimpl-idiom-really-used-in-practice" target="_blank" rel="noopener">1</a> <a href="http://stackoverflow.com/questions/60570/why-should-the-pimpl-idiom-be-used" target="_blank" rel="noopener">2</a> <a href="http://stackoverflow.com/questions/4300696/what-is-the-iosfwd-header" target="_blank" rel="noopener">3(iosfwd)</a>*   pimpl v.s. interface, check stackOverflow <a href="http://stackoverflow.com/questions/825018/pimpl-idiom-vs-pure-virtual-class-interface?rq=1" target="_blank" rel="noopener">4</a></li></ul></li></ol><h3 id="Ihheritance-and-Object-Oriented-Design"><a href="#Ihheritance-and-Object-Oriented-Design" class="headerlink" title="Ihheritance and Object-Oriented Design"></a>Ihheritance and Object-Oriented Design</h3><ol><li><strong>public inheritance</strong> means “is-a”. Everything that applies to base classes must also apply to derived classes.</li><li><p>avoid hiding inherited names</p><pre><code>1.  for pubic inherit, if you inherit from a base class with overloaded functions and you want to redefine or override only some of them, you need to include a `using` declaration for each name you’d otherwise be hiding. If you don’t, some of the names you’d like to inherit will be hidden.(why? first check the function name, then the type of parameter. See _c++ primer_, chap 15.6)</code></pre><ol start="2"><li>for private inherit, if you don’t want to inherit all of them, you could use inline forwarding functions instead of <code>using</code> declaration.</li></ol></li><li><p>differentiate between <strong>inheritance</strong> of interface and inheritance of implementation</p><pre><code>1.  The purpose of declaring a **pure virtual function** is to have derived classes inherit a function _interface only_.</code></pre><ol start="2"><li>The purpose of declaring a <strong>simple virtual function</strong> is to have derived classes inherit a function <em>interface as well as a default implementation</em>(sometimes maybe dangerous, could separate functions for providing interface and default implementation)</li><li>The purpose of declaring a <strong>non-virtual function</strong> is to have derived classes inherit a function <em>interface as well as a mandatory implemntation</em>.</li></ol></li><li><p>Consider <strong>alternatives to virtual functions</strong></p><pre><code>*   use the **non-virtual interface idiom**(NVI idiom), a form of the  _Template Method design pattern_ that wraps public non-virtual member functions around less accessible virtual functions. Details of NVI in [wiki](https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface)(noted: derived classes could redefining private virtual functions)</code></pre><ul><li>replace virtual functions with <strong>function pointer data members</strong>, a stripped-down manifestation of the <strong>Strategy design pattern</strong><a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="noopener">wiki</a>.</li><li>Replace virtual function with <strong>tr1::function data members</strong>, thus allowing use of any callable entity with a signature compatible with what you need.This, too, is a form of the Strategy desing pattern.[For <em>c++11</em>, it’s <strong>std::function</strong> and <strong>std::bind</strong>]</li><li>replace virtual functions in one hierarchy with <strong>virtual functions in another hierarchy</strong>. This is the conventional implementation of the Strategy design pattern.</li></ul></li><li><p>never redefine an inherited non-virtual function. cause non-virtual functions are statically bound.</p></li><li>never redefine an inherited default parameter value, because <em>default parameter values are statically bound</em>, while virtual functions- the only functions you should be overriding - are dynamically bound.</li><li>Model ‘has-a’ or ‘is-implemented-in-terms-of’ through composition.</li><li><strong>private inheritance</strong> means <em>is-implemented-in-terms-of</em>. It’s usually inferior to composition, but it makes sense when a derived class needs to composition(mixture of public inheritance and containment), but it makes sense when a derived class needs access to protected base class members or needs to redefine inherited virtual functions. private inheritance can enable the <em>empty base optimization</em>(“empty” class never have non-static data members, but contain typedefs, enums, static data members, or non-virtual functions), which could minimize object sizes.</li><li><strong>Multiple inheritance</strong> can lead to new ambiguity issues and to the need for <strong>virtual inheritance</strong>. Virtual inheritance imposes costs in size, speed, and complexity of initialization and assignment. It’s most practical when virtual base classes have no data.<br>One scenario involves combining public inheritance from an Interface class with private inheritance from a class that helps with implementation.</li></ol><h3 id="Templates-and-Generic-Programming"><a href="#Templates-and-Generic-Programming" class="headerlink" title="Templates and Generic Programming"></a>Templates and Generic Programming</h3><ol><li><p>both classes and templates support <strong>interfaces and polymorphism</strong></p><pre><code>1.  classes: interfaces are explicit and centered on function signatures. Polymorphism: runtime through virtual functions</code></pre><ol start="2"><li>template parameters: interfaces are implicit and based on valid expression. Polymorphism: compilation through template instantiation and function overloading resolution.</li></ol></li><li><p>when declaring template paramters, <code>class</code> and <code>typename</code> are interchangeable. use <strong><code>typename</code></strong> to identify <em>nested dependent type names</em>, except in base class lists or as a base class identifier in a member initialization list.</p></li><li>In derived class templates, refer to names in <strong>base class templates</strong> via a <code>this-&amp;gt;</code> prefix , via <code>using</code> declarations, or via an explicit base class qualification.</li><li><p><strong>factor parameter-independent code out of templates</strong>: templates generate multiple classes and multiple functions, which may cause bloat. about <em>non-type parameter</em>, check this in <a href="http://stackoverflow.com/questions/5687540/non-type-template-parameters" target="_blank" rel="noopener">stackOverflow</a></p><pre><code>1.  bloat due to non-type template parameters can often be eliminated by replacing template parameters with funciton parameters or class data members.</code></pre><ol start="2"><li>bloat due to parameters can be reduced by sharing implementations for instantiation types with identical binary representations.</li></ol></li><li><p>use <strong>member function templates</strong> to generate functions that accept all compatible types.(kind of similar to Covariance and Contravariance in scala) (could use private build-in pointer the control the conversion, thus make it “covariance”).<br>If you declare member templates for generalized copy construction or generalized assignment, you’ll still need to declare the normal copy constructor and copy assignment operator, too.</p></li><li>When writing a class template that offers functions related to the template that support <strong>implicit type conversions on all parameters</strong>(see list 8 in <em>Resource Management</em> part), define thoses functions as friends inside the class template.7.  <strong>Traits</strong> classes make information about types available during compilation. They’re implemented using templates and template specializations. In conjunction with overloading, traits classes make it possible to perform compile-time <em>if…else</em> tests on types.(create a set of overloaded “worker” functions or function templates that differ in a traits parameter).</li><li><p><strong>Template metaprogramming</strong>(TMP) could shift work from runtime to compile-time, thus enabling earlier error detection and higher runtime performance. One “hello word”-type example:</p><pre><code>template&amp;lt;unsigned n&amp;gt;</code></pre><p>struct Factorial{</p><pre><code>enum{ value = n * Factorial&amp;lt;n-1&amp;gt;::value};</code></pre><p>};<br>template&lt;&gt;<br>struct Factorial&lt;0&gt;{</p><pre><code>enum {value = 1};</code></pre><p>}</p></li></ol><h3 id="Customizing-new-and-delete"><a href="#Customizing-new-and-delete" class="headerlink" title="Customizing new and delete"></a>Customizing <code>new</code> and <code>delete</code></h3><ol><li><p>understand the behavior of the **new-handler</p><pre><code>1.  well-designed new-handler function must do one of the following:        *   Make more memory available*   install a different new-handler*   deinstall the new-handler*   throw an exception*   not return(abort or exit)2.  `set_new_hadler` allows you to specify a function to be called when memory allocation requests cannot be satisfied.</code></pre><ol start="3"><li><em>Nothrow new</em> is of limited utility, because it applies only to memory allocation. subsequent constructor calls may still throw exceptions.</li></ol></li><li><p>few reasons to write custom versions of <code>new</code> and <code>delete</code>.</p><pre><code>*   to detect usage errors</code></pre><ul><li>to collect statistics about the use of dynamically allocated memory</li><li>to increase the speed of allocation and deallocation</li><li>to reduce the space overhead of default memory management</li><li>to compensate for suboptimal alignment in the default allocator</li><li>to cluster related objects near one another</li><li>to obtain unconventional behavior.</li></ul></li><li><p>operator <code>new</code> should contain an <em>infinite loop</em> trying to allocate memory, should call the new-handler if it can’t satisfy a memory request, and should handle requests for zero bytes. Class-specific versions should handle requests for larger blocks than expected(use standard operator new).<br>operator <code>delete</code> should do nothing if passed a pointer that is null. Class-specific versions should handle blocks that are larger than expected.(use standard operator delete)</p></li><li>when you are write a <strong>placement version of operator new</strong>, be sure to write the corresponding placement version of operator delete. If you don’t, your program may experience subtle, intermittent memory leaks.<br>When you declare placement versions of <code>new</code> and <code>delete</code>, be sure not to unintentionally hide the normal versions of those functions.</li></ol><h3 id="Miscellany"><a href="#Miscellany" class="headerlink" title="Miscellany"></a>Miscellany</h3><ol><li>pay attention to compiler warnings, understand exactly what it’s trying to tell you.</li><li>Familiarize yourself with Boost.</li></ol>]]></content>
    
    <summary type="html">
    
      读effective c++的笔记
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>《百年孤独》家谱</title>
    <link href="http://yoursite.com/2016/03/24/%E3%80%8A%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC%E3%80%8B%E5%AE%B6%E8%B0%B1/"/>
    <id>http://yoursite.com/2016/03/24/《百年孤独》家谱/</id>
    <published>2016-03-24T12:21:34.000Z</published>
    <updated>2018-03-29T14:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“家族的第一个人被捆在树上，最后一个人正被蚂蚁吃掉”</p></blockquote><p>这几天利用课余时间把<a href="http://book.douban.com/subject/6082808/" target="_blank" rel="noopener">《百年孤独》</a> 看完了，其实高中的时候就一直想看这本书来着，当时正好人教版的教材里面有一章里面全部都是外国小说，其中就包括《百》的第一章。当时就觉得这本书貌似非常有意思，而且那个时候属于青春期，看到孤独两个字还是名著就特想看，没想到一直拖到现在。</p><p>说起这本书其实这几年在中国也比较火，原因是中国这几年才拿到它的版权，具体可以看<a href="http://zh.wikipedia.org/wiki/%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC" target="_blank" rel="noopener">维基百科</a>里关于版权的说明</p><p>由于看之前没有看简介，所以开始看的时候比较艰难，尤其是到他们几代人用差不多的名字的时候，容易记错，总要翻到前头才记得起来。我看完这本书觉得自己这水平还是没脸写书评，于是就就把布恩迪亚家族的图谱画出来了(我是有多无聊)</p><p><a href="/images/one-hundred-years-of-solitude.png"><img src="/images/one-hundred-years-of-solitude.png" alt="家谱"></a></p>]]></content>
    
    <summary type="html">
    
      给百年孤独画了下家谱
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib</title>
    <link href="http://yoursite.com/2016/02/25/matplotlib/"/>
    <id>http://yoursite.com/2016/02/25/matplotlib/</id>
    <published>2016-02-25T14:35:43.000Z</published>
    <updated>2018-03-29T14:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote><p>At the beginning of this month, in the morning of deadline for <em>VLDB</em>, I got stuck for hours just to draw “good” figures for our experiment parts. The reason is that I haven’t used <em>Matlab</em> for quit a long time, so I totally forgot many things. As a lesson, I think I need to write down some notes here. Since <em>Matlab</em> really gave me awful experience, I decide to turn to <em>python</em>.</p><p>First of all, we need <a href="http://www.numpy.org/" target="_blank" rel="noopener">numpy</a> and <a href="http://matplotlib.org/index.html" target="_blank" rel="noopener">matplotlib</a>.<br>Acually, what I need are just 2D bars and lines. So I would just keep nodes for these two. we use <em>pyplot</em>, which provides a MATLAB-like plotting framework.</p><blockquote><p>Talk is cheap, show me your code.</p></blockquote><h2 id="bar"><a href="#bar" class="headerlink" title="bar"></a>bar</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> numpy as np</span><br><span class="line"><span class="built_in">import</span> matplotlib.pyplot as plt</span><br><span class="line"><span class="attr">N</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">#I just make up all these numbers</span></span><br><span class="line"><span class="attr">menMeans</span>   = (<span class="number">20</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">27</span>)</span><br><span class="line"><span class="attr">womenMeans</span> = (<span class="number">25</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">20</span>, <span class="number">25</span>)</span><br><span class="line"><span class="attr">oldMeans</span> =   (<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">24</span>, <span class="number">31</span>)</span><br><span class="line"><span class="attr">youngMeans</span> =   (<span class="number">25</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">29</span>)</span><br><span class="line"><span class="attr">menStd</span>     = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="attr">womenStd</span>   = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attr">oldStd</span> = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attr">youngStd</span> = (<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attr">ind</span> = np.arange(<span class="number">0</span>, N, <span class="number">2</span>)   <span class="comment"># the x locations for the groups</span></span><br><span class="line"><span class="attr">width</span> = <span class="number">0.35</span>  <span class="comment"># the width of the bars: can also be len(x) sequence</span></span><br><span class="line">plt.figure(<span class="attr">figsize=(8,4))</span></span><br><span class="line"><span class="attr">p1</span> = plt.bar(ind, menMeans, width, <span class="attr">color='r',</span> <span class="attr">yerr=womenStd,</span> <span class="attr">hatch="|||",</span> <span class="attr">label='Men')</span></span><br><span class="line"><span class="attr">p2</span> = plt.bar(ind, womenMeans, width, <span class="attr">color='y',</span> <span class="attr">bottom=menMeans,</span> <span class="attr">yerr=menStd,</span> <span class="attr">hatch="x",</span> <span class="attr">label='Women')</span></span><br><span class="line"><span class="attr">p3</span> = plt.bar(ind+width, oldMeans, width, <span class="attr">color='w',</span> <span class="attr">yerr=oldStd,</span> <span class="attr">hatch=".",</span> <span class="attr">label='Old')</span></span><br><span class="line"><span class="attr">p4</span> = plt.bar(ind+width*<span class="number">2</span>, youngMeans, width, <span class="attr">color='w',</span> <span class="attr">yerr=youngStd,</span> <span class="attr">hatch="//",</span> <span class="attr">label='Young')</span></span><br><span class="line">plt.ylabel('Scores')</span><br><span class="line">plt.title('Scores by group <span class="literal">and</span> gender')</span><br><span class="line">plt.xticks(ind+width*<span class="number">1.5</span>, ('G1', 'G2', 'G3', 'G4', 'G5') )</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>,<span class="number">81</span>,<span class="number">10</span>))</span><br><span class="line">plt.legend(<span class="attr">fontsize</span> = 'medium', <span class="attr">loc='upper</span> right', <span class="attr">borderpad=1,</span> <span class="attr">labelspacing=0.2,</span> <span class="attr">frameon=False)</span></span><br><span class="line"><span class="comment">#plt.show()</span></span><br><span class="line">plt.savefig('bar.eps', <span class="attr">format='eps',</span> <span class="attr">dpi=1000,</span> <span class="attr">bbox_inches='tight')</span></span><br></pre></td></tr></table></figure><p>Then we could generate the following figure.<br><a href="/images/bar.png"><img src="/images/bar.png" alt="f1"></a></p><p>so as you can see, it is just like Matlab. pyplot provides</p><ul><li><code>xlabel</code>, <code>ylabel</code>, <code>title</code></li><li><code>xticks</code>, <code>yticks</code></li><li><code>figsize</code>,    <code>savefig</code></li><li><code>legend</code></li></ul><ol><li><p><code>figsize</code> specify the width and height of figure, and the default DPI is 80. While the default DPI for <code>savefig</code> is 100. so if you want to make <code>plt.show()</code> and <code>plt.savefig</code> look identical, you could pass <code>fig.dpi</code> to <code>savefig</code>.</p><pre><code>fig.savefig(&amp;apos;temp.png&amp;apos;, dpi=fig.dpi)</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      matplotlib用法记录
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="plot" scheme="http://yoursite.com/tags/plot/"/>
    
  </entry>
  
</feed>
